{"version":3,"sources":["components/SearchBar.js","components/NavigationBar.js","components/MovieList.js","components/NominationList.js","components/App.js","index.js"],"names":["SearchBar","props","useState","value","setValue","type","id","placeholder","onChange","event","target","updateSearch","onClick","NavButton","update","isValid","forceDisable","elementClass","active","concat","isValidPage","page","total","className","text","totalResults","firstResult","lastResult","Math","min","NavigationBar","aria-label","toString","ceil","MovieList","movieItems","messageDiv","movieResults","results","message","map","movie","disableStatus","nominations","length","includes","imdbLink","href","rel","disabled","Add","parseInt","NominationList","nominationItems","Remove","App","url","URL","window","location","baseUrl","origin","pathname","localStorage","JSON","parse","state","lastSearchTerm","resultsPage","bind","addNomination","removeNomination","params","searchParams","searchTerm","has","get","this","process","fetch","search","getResults","then","response","json","data","setState","catch","error","console","log","updateResults","newNominations","slice","push","updateNominationCache","movieIndex","indexOf","splice","stringify","banner","shareLink","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19d7508f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction SearchBar(props) {\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"text\" id=\"search-bar\" placeholder=\"Enter a title...\" value={value} onChange={event => {\r\n                setValue(event.target.value);\r\n                props.updateSearch(event.target.value); //set search terms for future use\r\n            }}/>\r\n            <button id=\"search-clear\" onClick={event => {\r\n                setValue(\"\");\r\n                props.updateSearch(\"\");\r\n            }}>X</button>\r\n            <button id=\"search-submit\" onClick={event => {props.updateSearch(value)}}>Search</button>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nfunction NavigationBar(props) {\r\n    const page = props.page;\r\n    const totalResults = props.totalResults;\r\n    return (\r\n        <nav aria-label=\"Page navigation example\">\r\n        <ul className=\"pagination\">\r\n            <NavButton text=\"First\" page={1} active={false} total={totalResults} update={props.update}/>\r\n            <NavButton text=\"Previous\" page={page-1} active={false} total={totalResults} update={props.update}/>\r\n            <NavButton text={page.toString()} page={page} active={true} total={totalResults} update={props.update}/>\r\n            <NavButton text=\"Next\" page={page+1} active={false} total={totalResults} update={props.update}/>\r\n            <NavButton text=\"Last\" page={Math.ceil((totalResults+1)/10)} active={false} total={totalResults} update={props.update}/>\r\n        </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nfunction NavButton(props) {\r\n    let elementClass = \"page-item\";\r\n    if (props.active) {\r\n        elementClass = elementClass.concat(\" \", \"active\");\r\n    } else if (!isValidPage(props.page, props.total)){\r\n        elementClass = elementClass.concat(\" \", \"disabled\");\r\n    }\r\n    return (\r\n        <li className={elementClass}>\r\n            <a\r\n                className=\"page-link\"\r\n                onClick={clickHandler(() => props.update(null, props.page), isValidPage(props.page, props.total), props.active)}\r\n            >{props.text}</a>\r\n        </li>\r\n    );\r\n}\r\n\r\nfunction clickHandler(update, isValid, forceDisable) {\r\n    return (isValid && !forceDisable) ? update: () => null;\r\n}\r\n\r\nfunction isValidPage(page, totalResults) {\r\n    /*\r\n    Returns true if and only if the given page number is valid for the given number of results.\r\n    There are up to 10 results per page (API response format) and page numbers start at 1.\r\n    */\r\n    const firstResult = 1 + 10*(page-1);\r\n    const lastResult = Math.min(10*page, totalResults);\r\n    return (page > 0) && (firstResult <= lastResult);\r\n}\r\n\r\nexport default NavigationBar;","import React from \"react\";\r\nimport NavigationBar from \"./NavigationBar\";\r\n\r\nfunction MovieList(props) {\r\n    const movieResults = props.results;\r\n    let movieItems, messageDiv, totalResults;\r\n    if (movieResults === null || movieResults[\"Response\"] === \"False\") {\r\n        let message = movieResults[\"Error\"] == \"Incorrect IMDb ID.\" ? \"Search results will appear here.\" : movieResults[\"Error\"];\r\n        messageDiv = <div>{message}</div>;\r\n        totalResults = 0;\r\n    } else {\r\n        movieItems = movieResults[\"Search\"].map(movie => {\r\n            let disableStatus = (props.nominations.length >= 5) || (props.nominations.includes(movie));\r\n            let imdbLink = `https://www.imdb.com/title/${movie[\"imdbID\"]}`;\r\n            return (\r\n                <li key={movie[\"imdbID\"]}>\r\n                    <span className=\"mr-1\">\r\n                    <a href={imdbLink} target=\"_blank\" rel=\"noopener noreferrer\">{movie[\"Title\"]} ({movie[\"Year\"]})</a>\r\n                    </span>\r\n                    <button disabled={disableStatus} onClick={() => props.Add(movie)}>Nominate</button>\r\n                </li>\r\n            );\r\n        });\r\n        totalResults = parseInt(movieResults[\"totalResults\"]);\r\n    }\r\n    return (\r\n        <div id=\"movie-results\" className=\"bg-light p-2 border border-dark rounded\">\r\n            <h2>Search Results</h2>\r\n            <NavigationBar page={props.page} update={props.updateSearch} totalResults={totalResults}/>\r\n            {messageDiv}\r\n            <ul>\r\n                {movieItems}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieList;","import React from 'react';\r\n\r\nfunction NominationList(props) {\r\n    const nominations = props.nominations;\r\n    let nominationItems, message;\r\n    if (nominations.length === 0) {\r\n        message = <div>No nominations- add some by searching for movies!</div>;\r\n    } else {\r\n        nominationItems = props.nominations.map(movie => {\r\n            return (\r\n                <li key={movie[\"imdbID\"]}>\r\n                    <span className=\"mr-1\">{movie[\"Title\"]} ({movie[\"Year\"]})</span>\r\n                    <button onClick={() => props.Remove(movie)}>Remove</button>\r\n                </li>\r\n            );\r\n        });\r\n    }\r\n    return (\r\n        <div id=\"nomination-list\" className=\"bg-light mx-2 p-2 border border-dark rounded\">\r\n            <h2>Current Nominations ({nominations.length} / 5)</h2>\r\n            {message}\r\n            <ul>\r\n                {nominationItems}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NominationList;","import React from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport MovieList from \"./MovieList\";\r\nimport NominationList from \"./NominationList\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        //get current url without query string\r\n        let url = new URL(window.location.href);\r\n        this.baseUrl = url.origin.concat(url.pathname);\r\n        //get cached nominations if any\r\n        let nominations = (localStorage[\"nominations\"]) ? JSON.parse(localStorage[\"nominations\"]) : [];\r\n\r\n        this.state = {\r\n            results: {\"Response\": \"False\", \"Error\": \"Incorrect IMDb ID.\"},\r\n            nominations: nominations,\r\n            lastSearchTerm: \"\",\r\n            resultsPage: 1\r\n        }\r\n        this.updateSearch = this.updateSearch.bind(this);\r\n        this.addNomination = this.addNomination.bind(this);\r\n        this.removeNomination = this.removeNomination.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let params = new URL(window.location.href).searchParams;\r\n        let searchTerm = params.has(\"s\") ? params.get(\"s\") : \"\";\r\n        let page = params.has(\"page\") ? parseInt(params.get(\"page\")) : 1;\r\n        this.updateSearch(searchTerm, page);\r\n    }\r\n\r\n    getResults(searchTerm, page=1) {\r\n        /*\r\n        Returns a promise which will contain the JSON representation of the search results for the given term and page.\r\n        The API is HTTP, not HTTPS, so this will cause a mixed content error on HTTPS pages.\r\n        */\r\n        var url = `https://www.omdbapi.com/?apikey=${process.env.REACT_APP_API_KEY}&s=${searchTerm}&type=movie&page=${page}`;\r\n        return fetch(url);\r\n    }\r\n\r\n    updateResults(search, page=1) {\r\n        /*Updates the results in this component's state.*/\r\n        this.getResults(search, page)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({results: data});\r\n            }\r\n            ).catch(error => {\r\n                console.log(`${error}`);\r\n            }\r\n        );\r\n    }\r\n\r\n    updateSearch(search, page=1) {\r\n        /*Updates the search term and results. */\r\n        if (search === null) {\r\n            search = this.state.lastSearchTerm;\r\n        }\r\n        this.updateResults(search, page);\r\n        this.setState({\r\n            resultsPage: page,\r\n            lastSearchTerm: search\r\n        })\r\n    }\r\n\r\n    addNomination(movie) {\r\n        /*Adds the given movie to the list of nominations. */\r\n        if (this.state.nominations.length === 5) {\r\n            return;\r\n        }\r\n        let newNominations = this.state.nominations.slice();\r\n        newNominations.push(movie);\r\n        this.setState({nominations: newNominations});\r\n        this.updateNominationCache(newNominations);\r\n    }\r\n\r\n    removeNomination(movie) {\r\n        /*Removes the given movie from the list of nominations; assumes the operation is possible. */\r\n        let movieIndex = this.state.nominations.indexOf(movie);\r\n        if (this.state.nominations.length === 0 && movieIndex === -1) {\r\n            return;\r\n        }\r\n        let newNominations = this.state.nominations.slice();\r\n        newNominations.splice(movieIndex, 1);\r\n        this.setState({nominations: newNominations});\r\n        this.updateNominationCache(newNominations);\r\n    }\r\n\r\n    updateNominationCache(nominations) {\r\n        localStorage[\"nominations\"] = JSON.stringify(nominations);\r\n    }\r\n\r\n    render() {\r\n        let banner = (this.state.nominations.length === 5) ? (\r\n            <div id=\"max-nominations\" className=\"banner alert alert-success\"><span className=\"p-2\">Maximum number of nominations reached, thank you!</span></div>\r\n        ) : <div/>;\r\n        let shareLink = <div id=\"share-link\"></div>;\r\n        if (this.state.lastSearchTerm !== \"\" && this.state.results[\"Response\"] !== \"False\") {\r\n            let url = new URL(this.baseUrl);\r\n            url.search = `s=${this.state.lastSearchTerm}&page=${this.state.resultsPage}`;\r\n            shareLink = `Share this search: ${url.toString()}`;\r\n        }\r\n        return (\r\n            <div>\r\n                {banner}\r\n                <div className=\"p-2 m-2\">\r\n                    <h1>OMDB Nominations</h1>\r\n                    <SearchBar updateSearch={this.updateSearch}/>\r\n                    <div id=\"share-link\" className=\"p-2\">{shareLink}</div>\r\n                </div>\r\n                <div className=\"container m-0\">\r\n                    <MovieList results={this.state.results}\r\n                        nominations={this.state.nominations}\r\n                        page={this.state.resultsPage}\r\n                        updateSearch={this.updateSearch}\r\n                        Add={this.addNomination}\r\n                    />\r\n                    <NominationList\r\n                        nominations={this.state.nominations}\r\n                        Remove={this.removeNomination}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}